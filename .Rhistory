ggplot(df_long, aes(x = Cell, y = Gene_Expression, fill = Cell)) +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +
labs(x = "Cell", y = "Gene Expression", title = "Violin Plot of Gene Expression by Cell") +
theme_minimal() +
scale_fill_discrete(name = "Cell")
random_cells_df
ggplot(df_long, aes(x = Cell, y = Gene_Expression, fill = Cell)) +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +
labs(x = "Cell", y = "Gene Expression", title = "Violin Plot of Gene Expression by Cell") +
theme_minimal() +
scale_fill_discrete(name = "Cell") +
scale_x_discrete(labels = random_cells_df$cell_type)
data_sc
data_sc %>% dim()
random_cells_df_100 <- metadata_sc %>%
group_by(cell_type) %>%
sample_n(100) %>%
ungroup() %>%
select(cell_name, cell_type)
random_cells_df_100 <- metadata_sc %>%
group_by(cell_type) %>%
sample_n(50) %>%
ungroup() %>%
select(cell_name, cell_type)
metadata_sc %>% head
unique_counts <- metadata_sc %>%
count(cell_type)
unique_counts
metadata_pca <- metadata_sc[which(metadata_sc$cell_type, !is.na),]
metadata_malignant <- metadata_sc[metadata_sc$cell_type == "malignant", ]
metadata_malignant
metadata_malignant <- metadata_sc[metadata_sc$cell_type == "Malignant", ]
metadata_malignant
metadata_pca <- metadata_malignant %>% sample_n(100)
metadata_pca
metadata_malignant <- metadata_sc[metadata_sc$cell_type == "Malignant", ] %>%
sample_n(100)
metadata_pca <- metadata_sc[!is.na(metadata_sc$cell_type), ]
metadata_pca <- rbind(metadata_pca, metadata_malignant)
metadata_pca %>% count(cell_type)
metadata_pca <- metadata_sc[!is.na(metadata_sc$cell_type), ] %>%
metadata_sc[metadata_sc != "Malignant"]
metadata_pca <- metadata_sc[!is.na(metadata_sc$cell_type), ] %>%
metadata_sc[metadata_sc != "Malignant",]
metadata_pca <- metadata_sc[!is.na(metadata_sc$cell_type), ] %>%
metadata_sc[metadata_sc$cell_type != "Malignant",]
metadata_pca <- metadata_sc %>%
filter(!is.na(cell_type) | cell_type != "Malignant")
metadata_pca %>% count(cell_type)
metadata_pca <- metadata_sc %>%
filter(!is.na(cell_type) & cell_type != "Malignant")
metadata_pca %>% count(cell_type)
metadata_malignant <- metadata_sc[metadata_sc$cell_type == "Malignant", ] %>%
sample_n(50)
metadata_pca <- rbind(metadata_pca, metadata_malignant)
metadata_pca %>% count(cell_type)
metadata_malignant <- filter(cell_type == "Malignant") %>%
sample_n(50)
metadata_malignant <- metadata_sc %>% filter(cell_type == "Malignant") %>%
sample_n(50)
metadata_malignant
metadata_pca <- rbind(metadata_pca, metadata_malignant)
metadata_pca <- metadata_sc %>%
filter(!is.na(cell_type) & cell_type != "Malignant")
metadata_malignant <- metadata_sc %>% filter(cell_type == "Malignant") %>%
sample_n(50)
metadata_pca <- rbind(metadata_pca, metadata_malignant)
metadata_pca
metadata_pca %>% count(cell_type)
pca <- prcomp(t(metadata_pca))
pca_df <- data_sc[metadata_pca,]
pca_df <- data_sc[rownames(metadata_pca),]
data_sc %>% dim()
metadata_pca
pca_df <- data_sc[,metadata_pca$cell_name]
pca <- prcomp(t(pca_df))
pca_scores <- pca$x
ggplot(data = as.data.frame(pca_scores), aes(x = PC1, y = PC2)) +
geom_point() +
labs(x = "Principal Component 1 (PC1)", y = "Principal Component 2 (PC2)",
title = "PCA of Single-Cell Data") +
theme_minimal()
pca <- prcomp(t(pca_df), scale = T)
ggplot(data = as.data.frame(pca_scores), aes(x = PC1, y = PC2)) +
geom_point() +
labs(x = "Principal Component 1 (PC1)", y = "Principal Component 2 (PC2)",
title = "PCA of Single-Cell Data") +
theme_minimal()
pca <- prcomp(t(pca_df), scale = T)
constant_columns <- apply(pca_df, 2, function(x) length(unique(x)) == 1)
constant_columns
sum(constant_columns)
pca_df_filtered <- pca_df[, !constant_columns]
pca <- prcomp(t(pca_df_filtered), scale = T)
pca_df <- data_sc[,metadata_pca$cell_name]
# Check for NaN values
has_nan <- any(is.nan(pca_df))
# Check for Inf values
has_inf <- any(is.infinite(pca_df))
# Check for non-numeric columns
non_numeric_cols <- sapply(pca_df, function(x) !is.numeric(x))
# Print results
if (has_nan) {
message("There are NaN values in pca_df.")
}
if (has_inf) {
message("There are Inf values in pca_df.")
}
if (any(non_numeric_cols)) {
message("There are non-numeric columns in pca_df.")
}
has_nan
has_inf
non_numeric_cols
sum(non_numeric_cols)
pca_df %>% head
pca_df <- data_sc[,metadata_pca$cell_name]
pca <- prcomp(t(pca_df), scale = T)
log_data_sc <- log2(data_sc + 1)
log_data_sc <- log_data_sc[rowMeans(log_data_sc) > 5,]
log_data_sc %>% dim()
log_data_sc <- log2(data_sc + 1)
log_data_sc <- log_data_sc[rowMeans(log_data_sc) > 1,]
log_data_sc
log_data_sc %>% dim()
log_pca_df <- log_data_sc[,metadata_pca$cell_name]
log_pca_df %>% dim()
pca <- prcomp(t(pca_df), scale = T)
pca_df %>% head
pca <- prcomp(pca_df, scale = T)
pca <- prcomp(pca_df)
pca_scores <- pca$x
ggplot(data = as.data.frame(pca_scores), aes(x = PC1, y = PC2)) +
geom_point() +
labs(x = "Principal Component 1 (PC1)", y = "Principal Component 2 (PC2)",
title = "PCA of Single-Cell Data") +
theme_minimal()
pca$x
max(log_data_sc)
pca <- prcomp(t(log_pca_df))
pca_scores <- pca$x
ggplot(data = as.data.frame(pca_scores), aes(x = PC1, y = PC2)) +
geom_point() +
labs(x = "Principal Component 1 (PC1)", y = "Principal Component 2 (PC2)",
title = "PCA of Single-Cell Data") +
theme_minimal()
ggplot(data = as.data.frame(pca_scores), aes(x = PC1, y = PC2, color = metadata_pca$cell_type)) +
geom_point() +
labs(x = "Principal Component 1 (PC1)", y = "Principal Component 2 (PC2)",
title = "PCA of Single-Cell Data", color = "Cell Type") +
theme_minimal()
raw= rowMeans(data_sc)
meanBoxplot= boxplot(raw, xlab= "Gene mean", ylab= "Value", main= "Mean of genes")
colsum= colSums(data_sc)
colsumPlot= plot(colsum, ylim= c(990000, 1010000), xlab= "cell", ylab= "sum of cell" )
rowmeans = rowMeans(data_sc)
meanBoxplot= boxplot(raw, xlab= "Gene mean", ylab= "Value", main= "Mean of genes")
colsum = colSums(data_sc)
colsumPlot= plot(colsum, ylim= c(990000, 1010000), xlab= "cell", ylab= "sum of cell" )
colsumPlot= plot(colsum, ylim= c(990000, 1010000), xlab= "cell", ylab= "sum of cell" )
colsumPlot= plot(colsum, ylim= c(990000, 1010000), xlab= "cell", ylab= "sum of cell" )
colsumPlot
colsumPlot= plot(colsum, ylim= c(990000, 1010000), xlab= "cell", ylab= "sum of cell" )
rowmeans = rowMeans(data_sc)
meanBoxplot= boxplot(raw, xlab= "Gene mean", ylab= "Value", main= "Mean of genes")
len.ANSWER6 = print(length(unlist(strsplit(ANSWER6,split = " ")))) # DON'T delete!
ANSWER6= "data_sc is TPM, boxplot indicate the data is not centered (mean > 0) or scaled. Sum of columns show the data is TPM, all gene values sum to 1e6."
len.ANSWER6 = print(length(unlist(strsplit(ANSWER6,split = " ")))) # DON'T delete!
log_data_sc <- log2((data_sc / 10) +1)
log_data_sc <- apply(log_data_sc, 1, function(x) x - mean(x))
boxplot(rowMeans(log_data_sc)
P)
boxplot(rowMeans(log_data_sc)
)
log_data_sc <- log2((data_sc / 10) +1)
boxplot(rowMeans(log_data_sc)
boxplot(rowMeans(log_data_sc))
boxplot(rowMeans(log_data_sc))
log_data_sc <- log2((data_sc / 10) +1)
cent_mat <- t(apply(log_data_sc, 1, function(x) x - mean(x)))
boxplot(cent_mat)
boxplot(rowMeans(cent_mat))
log_mat= log2(data_sc/10 + 1)
cent_mat= t(apply(log_mat, 1, function(x) x - mean(x)))
boxplot(rowMeans(cent_mat))
cent_mat %>% head
log_data_sc <- log2((data_sc / 10) +1)
cent_mat <- apply(log_data_sc, 1, function(x) x - mean(x))
boxplot(rowMeans(cent_mat))
compute_comp(cent_mat)
compute_comp <- function(tpm_data) {
Complexity <- apply(tpm_data > 0, 2, sum)
return(Complexity)
}
compute_comp(cent_mat)
cent_mat
rownames(cantmat) %>% head
rownames(cent_mat) %>% head
colnames(cent_mat) %>% head
comp_df <- compute_comp(cent_mat)
rownames(com_df)
comp_up <-names(compute_comp(cent_mat) > 500)
cent_filt <- cent_mat[,comp_up]
dim(cent_mat)
dim(cent_filt)
cent_filt <- cent_mat[,comp_up]
dim(cent_filt)
comp_up %>% head
cent_mat <- t(apply(log_data_sc, 1, function(x) x - mean(x)))
compute_comp <- function(tpm_data) {
Complexity <- apply(tpm_data > 0, 2, sum)
return(Complexity)
}
comp_up <-names(compute_comp(cent_mat) > 500)
cent_filt <- cent_mat[,comp_up]
dim(cent_filt)
length(comp_up)
comp_up
comp_up %>% head
comp_up %>% values()
comp_up <-names(compute_comp[compute_comp(cent_mat) > 500])
comp_up <-names(compute_comp[,compute_comp(cent_mat) > 500])
comp_up <-names(cent_mat[,compute_comp(cent_mat) > 500])
length(cent_mat)
length(comp_up)
cent_mat <- t(apply(log_data_sc, 1, function(x) x - mean(x)))
cent_mat %>% head
cent_mat <- apply(log_data_sc, 1, function(x) x - mean(x))
rownames(cent_mat) %>% head
log_data_sc %>% rownames
log_data_sc <- log2((data_sc / 10) +1)
cent_mat <- apply(log_data_sc, 1, function(x) x - mean(x))
cent_mat %>% rownames
data_sc <- readRDS('caron_mat.RDS')
metadata_sc <- readRDS('caron_metadata.RDS')
rowmeans = rowMeans(data_sc)
meanBoxplot= boxplot(raw, xlab= "Gene mean", ylab= "Value", main= "Mean of genes")
colsum = colSums(data_sc)
meanBoxplot= boxplot(raw, xlab= "Gene mean", ylab= "Value", main= "Mean of genes")
meanBoxplot= boxplot(rowmeans, xlab= "Gene mean", ylab= "Value", main= "Mean of genes")
colsum = colSums(data_sc)
colsumPlot= plot(colsum, ylim= c(990000, 1010000), xlab= "cell", ylab= "sum of cell")
ANSWER6= "data_sc is TPM, boxplot indicate the data is not centered (mean > 0) or scaled. Sum of columns show the data is TPM, all gene values sum to 1e6."
log_data_sc <- log2((data_sc / 10) +1)
cent_mat <- apply(log_data_sc, 1, function(x) x - mean(x))
cent_mat %>% dim
cent_mat %>% rownames
cent_mat %>% colnames
cent_mat <- t(apply(log_data_sc, 1, function(x) x - mean(x)))
cent_mat %>% rownames
compute_comp <- function(tpm_data) {
Complexity <- apply(tpm_data > 0, 2, sum)
return(Complexity)
}
log_data_complexity <- compute_comp(log_data)
log_data_complexity <- compute_comp(log_data_sc)
comp_threshold <- 500
comp_up <- log_data_complexity > comp_threshold
cent_filt <- cent_mat[, comp_up]
dim(cent_filt)
dim(cent_mat)
log_data_complexity %>% head
min(log_data_complexity)
sum(log_data_complexity > 500)
sum(log_data_complexity < 500)
metadata_sc_filt <- metadata_sc[comp_up, ]
log_data_filt <- log_data[comp_up, ]
log_data_filt <- log_data_sc[comp_up, ]
log_data_sc %>% rownames
gene_mean_expression <- colMeans(log_data_sc)
top_genes <- names(sort(gene_mean_expression, decreasing = TRUE)[1:7000])
top_genes %>% head
gene_mean_expression <- rowMeans(log_data_sc)
gene_mean_expression %>% head
top_genes <- names(sort(gene_mean_expression, decreasing = TRUE)[1:7000])
cent_final <- cent_filt[top_genes, ]
dim(cent_filt)
dim(cent_final)
metadata_sc_filt
metadata_sc_filt$Malignant <- ifelse(metadata_sc_filt$cell_type == "Malignant", "Malignant", "non-Malignant")
metadata_sc_filt$Malignant %>% count
metadata_sc_filt$Malignant
malignant_counts <- table(metadata_sc_filt$Malignant)
malignant_df <- as.data.frame(malignant_counts)
names(malignant_df) <- c("Category", "Count")
ggplot(data = malignant_df, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
